From 761fe40ab217de1b97a091f48f4731fe928689d8 Mon Sep 17 00:00:00 2001
From: uburst <uburst@zju.edu.cn>
Date: Tue, 10 Jun 2025 13:06:07 +0000
Subject: [PATCH] 575.51.02 patch for 6.15rc2

---
 kernel-open/Kbuild                            | 51 ++++++++++---------
 kernel-open/nvidia-drm/nvidia-drm-linux.c     |  2 +-
 .../nvidia-drm/nvidia-drm-os-interface.c      |  7 ++-
 .../nvidia-modeset/nvidia-modeset-linux.c     |  9 ++++
 kernel-open/nvidia-uvm/uvm_ats_sva.c          |  8 +++
 kernel-open/nvidia-uvm/uvm_common.h           |  6 +++
 kernel-open/nvidia-uvm/uvm_hmm.c              | 47 ++++++++++++-----
 kernel-open/nvidia-uvm/uvm_pmm_gpu.c          |  4 +-
 kernel-open/nvidia/nv-nano-timer.c            | 12 ++++-
 kernel-open/nvidia/nv.c                       |  9 ++++
 src/nvidia-modeset/Makefile                   |  1 +
 11 files changed, 113 insertions(+), 43 deletions(-)

diff --git a/kernel-open/Kbuild b/kernel-open/Kbuild
index 44f6e55d..1c626f2e 100644
--- a/kernel-open/Kbuild
+++ b/kernel-open/Kbuild
@@ -82,14 +82,15 @@ $(foreach _module, $(NV_KERNEL_MODULES), \
 # $(EXTRA_CFLAGS) to ccflags-y for compatibility.
 #
 
-EXTRA_CFLAGS += -I$(src)/common/inc
-EXTRA_CFLAGS += -I$(src)
-EXTRA_CFLAGS += -Wall $(DEFINES) $(INCLUDES) -Wno-cast-qual -Wno-format-extra-args
-EXTRA_CFLAGS += -D__KERNEL__ -DMODULE -DNVRM
-EXTRA_CFLAGS += -DNV_VERSION_STRING=\"575.51.02\"
+ccflags-y += -std=gnu17
+ccflags-y += -I$(src)/common/inc
+ccflags-y += -I$(src)
+ccflags-y += -Wall $(DEFINES) $(INCLUDES) -Wno-cast-qual -Wno-format-extra-args
+ccflags-y += -D__KERNEL__ -DMODULE -DNVRM
+ccflags-y += -DNV_VERSION_STRING=\"575.51.02\"
 
 ifneq ($(SYSSRCHOST1X),)
- EXTRA_CFLAGS += -I$(SYSSRCHOST1X)
+ ccflags-y += -I$(SYSSRCHOST1X)
 endif
 
 # Some Android kernels prohibit driver use of filesystem functions like
@@ -99,57 +100,57 @@ endif
 PLATFORM_IS_ANDROID ?= 0
 
 ifeq ($(PLATFORM_IS_ANDROID),1)
- EXTRA_CFLAGS += -DNV_FILESYSTEM_ACCESS_AVAILABLE=0
+ ccflags-y += -DNV_FILESYSTEM_ACCESS_AVAILABLE=0
 else
- EXTRA_CFLAGS += -DNV_FILESYSTEM_ACCESS_AVAILABLE=1
+ ccflags-y += -DNV_FILESYSTEM_ACCESS_AVAILABLE=1
 endif
 
-EXTRA_CFLAGS += -Wno-unused-function
+ccflags-y += -Wno-unused-function
 
 ifneq ($(NV_BUILD_TYPE),debug)
- EXTRA_CFLAGS += -Wuninitialized
+ ccflags-y += -Wuninitialized
 endif
 
-EXTRA_CFLAGS += -fno-strict-aliasing
+ccflags-y += -fno-strict-aliasing
 
 ifeq ($(ARCH),arm64)
- EXTRA_CFLAGS += -mstrict-align
+ ccflags-y += -mstrict-align
 endif
 
 ifeq ($(NV_BUILD_TYPE),debug)
- EXTRA_CFLAGS += -g
+ ccflags-y += -g
 endif
 
-EXTRA_CFLAGS += -ffreestanding
+ccflags-y += -ffreestanding
 
 ifeq ($(ARCH),arm64)
- EXTRA_CFLAGS += -mgeneral-regs-only -march=armv8-a
- EXTRA_CFLAGS += $(call cc-option,-mno-outline-atomics,)
+ ccflags-y += -mgeneral-regs-only -march=armv8-a
+ ccflags-y += $(call cc-option,-mno-outline-atomics,)
 endif
 
 ifeq ($(ARCH),x86_64)
- EXTRA_CFLAGS += -mno-red-zone -mcmodel=kernel
+ ccflags-y += -mno-red-zone -mcmodel=kernel
 endif
 
 ifeq ($(ARCH),powerpc)
- EXTRA_CFLAGS += -mlittle-endian -mno-strict-align
+ ccflags-y += -mlittle-endian -mno-strict-align
 endif
 
-EXTRA_CFLAGS += -DNV_UVM_ENABLE
-EXTRA_CFLAGS += $(call cc-option,-Werror=undef,)
-EXTRA_CFLAGS += -DNV_SPECTRE_V2=$(NV_SPECTRE_V2)
-EXTRA_CFLAGS += -DNV_KERNEL_INTERFACE_LAYER
+ccflags-y += -DNV_UVM_ENABLE
+ccflags-y += $(call cc-option,-Werror=undef,)
+ccflags-y += -DNV_SPECTRE_V2=$(NV_SPECTRE_V2)
+ccflags-y += -DNV_KERNEL_INTERFACE_LAYER
 
 #
 # Detect SGI UV systems and apply system-specific optimizations.
 #
 
 ifneq ($(wildcard /proc/sgi_uv),)
- EXTRA_CFLAGS += -DNV_CONFIG_X86_UV
+ ccflags-y += -DNV_CONFIG_X86_UV
 endif
 
 ifdef VGX_FORCE_VFIO_PCI_CORE
- EXTRA_CFLAGS += -DNV_VGPU_FORCE_VFIO_PCI_CORE
+ ccflags-y += -DNV_VGPU_FORCE_VFIO_PCI_CORE
 endif
 
 WARNINGS_AS_ERRORS ?=
@@ -183,7 +184,7 @@ NV_CONFTEST_CMD := /bin/sh $(NV_CONFTEST_SCRIPT) \
 
 NV_CFLAGS_FROM_CONFTEST := $(shell $(NV_CONFTEST_CMD) build_cflags)
 
-NV_CONFTEST_CFLAGS = $(NV_CFLAGS_FROM_CONFTEST) $(EXTRA_CFLAGS) -fno-pie
+NV_CONFTEST_CFLAGS = $(NV_CFLAGS_FROM_CONFTEST) $(ccflags-y) -fno-pie
 NV_CONFTEST_CFLAGS += $(call cc-disable-warning,pointer-sign)
 NV_CONFTEST_CFLAGS += $(call cc-option,-fshort-wchar,)
 NV_CONFTEST_CFLAGS += $(call cc-option,-Werror=incompatible-pointer-types,)
diff --git a/kernel-open/nvidia-drm/nvidia-drm-linux.c b/kernel-open/nvidia-drm/nvidia-drm-linux.c
index 3cb1815d..209cb469 100644
--- a/kernel-open/nvidia-drm/nvidia-drm-linux.c
+++ b/kernel-open/nvidia-drm/nvidia-drm-linux.c
@@ -31,7 +31,7 @@
 
 MODULE_PARM_DESC(
     modeset,
-    "Enable atomic kernel modesetting (1 = enable, 0 = disable (default))");
+    "Enable atomic kernel modesetting (1 = enable (default), 0 = disable)");
 module_param_named(modeset, nv_drm_modeset_module_param, bool, 0400);
 
 #if defined(NV_DRM_FBDEV_AVAILABLE)
diff --git a/kernel-open/nvidia-drm/nvidia-drm-os-interface.c b/kernel-open/nvidia-drm/nvidia-drm-os-interface.c
index 7617476d..59ecaf2d 100644
--- a/kernel-open/nvidia-drm/nvidia-drm-os-interface.c
+++ b/kernel-open/nvidia-drm/nvidia-drm-os-interface.c
@@ -21,6 +21,7 @@
  */
 
 #include <linux/slab.h>
+#include <linux/version.h>
 
 #include "nvidia-drm-os-interface.h"
 
@@ -41,7 +42,7 @@
 #include <drm/drmP.h>
 #endif
 
-bool nv_drm_modeset_module_param = false;
+bool nv_drm_modeset_module_param = true;
 bool nv_drm_fbdev_module_param = true;
 
 void *nv_drm_calloc(size_t nmemb, size_t size)
@@ -238,7 +239,11 @@ unsigned long nv_drm_timeout_from_ms(NvU64 relative_timeout_ms)
 
 bool nv_drm_del_timer_sync(nv_drm_timer *timer)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     if (del_timer_sync(&timer->kernel_timer)) {
+#else
+    if (timer_delete_sync(&timer->kernel_timer)) {
+#endif
         return true;
     } else {
         return false;
diff --git a/kernel-open/nvidia-modeset/nvidia-modeset-linux.c b/kernel-open/nvidia-modeset/nvidia-modeset-linux.c
index 29fbf016..351e2475 100644
--- a/kernel-open/nvidia-modeset/nvidia-modeset-linux.c
+++ b/kernel-open/nvidia-modeset/nvidia-modeset-linux.c
@@ -37,6 +37,7 @@
 #include <linux/freezer.h>
 #include <linux/poll.h>
 #include <linux/cdev.h>
+#include <linux/version.h>
 
 #include <acpi/video.h>
 
@@ -748,7 +749,11 @@ static void nvkms_kthread_q_callback(void *arg)
      * pending timers and than waiting for workqueue callbacks.
      */
     if (timer->kernel_timer_created) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
         del_timer_sync(&timer->kernel_timer);
+#else
+        timer_delete_sync(&timer->kernel_timer);
+#endif
     }
 
     /*
@@ -1932,7 +1937,11 @@ restart:
              * completion, and we wait for queue completion with
              * nv_kthread_q_stop below.
              */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
             if (del_timer_sync(&timer->kernel_timer) == 1) {
+#else
+            if (timer_delete_sync(&timer->kernel_timer) == 1) {
+#endif
                 /*  We've deactivated timer so we need to clean after it */
                 list_del(&timer->timers_list);
 
diff --git a/kernel-open/nvidia-uvm/uvm_ats_sva.c b/kernel-open/nvidia-uvm/uvm_ats_sva.c
index a1256f26..a8b489c5 100644
--- a/kernel-open/nvidia-uvm/uvm_ats_sva.c
+++ b/kernel-open/nvidia-uvm/uvm_ats_sva.c
@@ -20,6 +20,7 @@
     DEALINGS IN THE SOFTWARE.
 
 *******************************************************************************/
+#include <linux/version.h>
 
 #include "uvm_ats_sva.h"
 
@@ -137,10 +138,17 @@ static NvU32 smmu_vcmdq_read32(void __iomem *smmu_cmdqv_base, int reg)
     return ioread32(SMMU_VCMDQ_BASE_ADDR(smmu_cmdqv_base, VCMDQ) + reg);
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
 static void smmu_vcmdq_write64(void __iomem *smmu_cmdqv_base, int reg, NvU64 val)
 {
     iowrite64(val, SMMU_VCMDQ_BASE_ADDR(smmu_cmdqv_base, VCMDQ) + reg);
 }
+#else
+static void smmu_vcmdq_write64(void __iomem *smmu_cmdqv_base, int reg, NvU64 val)
+{
+    __iowrite64_hi_lo(val, SMMU_VCMDQ_BASE_ADDR(smmu_cmdqv_base, VCMDQ) + reg);
+}
+#endif
 
 // Fix for Bug 4130089: [GH180][r535] WAR for kernel not issuing SMMU
 // TLB invalidates on read-only to read-write upgrades
diff --git a/kernel-open/nvidia-uvm/uvm_common.h b/kernel-open/nvidia-uvm/uvm_common.h
index 9e3dcb4d..a605080d 100644
--- a/kernel-open/nvidia-uvm/uvm_common.h
+++ b/kernel-open/nvidia-uvm/uvm_common.h
@@ -39,6 +39,12 @@
     #define UVM_IS_DEVELOP() 0
 #endif
 
+#include <linux/version.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
+#define page_pgmap(p) (p)->pgmap
+#endif
+
 #include "uvm_types.h"
 #include "uvm_linux.h"
 
diff --git a/kernel-open/nvidia-uvm/uvm_hmm.c b/kernel-open/nvidia-uvm/uvm_hmm.c
index ff24a012..fb24dbe9 100644
--- a/kernel-open/nvidia-uvm/uvm_hmm.c
+++ b/kernel-open/nvidia-uvm/uvm_hmm.c
@@ -1992,7 +1992,7 @@ static void fill_dst_pfn(uvm_va_block_t *va_block,
 
     dpage = pfn_to_page(pfn);
     UVM_ASSERT(is_device_private_page(dpage));
-    UVM_ASSERT(dpage->pgmap->owner == &g_uvm_global);
+    UVM_ASSERT(page_pgmap(dpage)->owner == &g_uvm_global);
 
     hmm_mark_gpu_chunk_referenced(va_block, gpu, gpu_chunk);
     UVM_ASSERT(!page_count(dpage));
@@ -2446,7 +2446,7 @@ static NV_STATUS hmm_block_atomic_fault_locked(uvm_processor_id_t processor_id,
     uvm_va_block_region_t region = service_context->region;
     struct page **pages = service_context->block_context->hmm.pages;
     struct vm_area_struct *vma = service_context->block_context->hmm.vma;
-    int npages;
+    // int npages;
     uvm_page_index_t page_index;
     uvm_make_resident_cause_t cause;
     NV_STATUS status;
@@ -2491,21 +2491,42 @@ static NV_STATUS hmm_block_atomic_fault_locked(uvm_processor_id_t processor_id,
 
     uvm_mutex_unlock(&va_block->lock);
 
-    npages = make_device_exclusive_range(service_context->block_context->mm,
-        uvm_va_block_cpu_page_address(va_block, region.first),
-        uvm_va_block_cpu_page_address(va_block, region.outer - 1) + PAGE_SIZE,
-        pages + region.first,
-        &g_uvm_global);
+    // npages = make_device_exclusive_range(service_context->block_context->mm,
+    //     uvm_va_block_cpu_page_address(va_block, region.first),
+    //     uvm_va_block_cpu_page_address(va_block, region.outer - 1) + PAGE_SIZE,
+    //     pages + region.first,
+    //     &g_uvm_global);
+    for(int page_idx = region.first; page_idx < region.outer; page_idx++) {
+        struct folio *folio;
+        struct page *page;
+        int ret;
+        unsigned long addr = uvm_va_block_cpu_page_address(va_block, page_idx);
+
+        page = make_device_exclusive(service_context->block_context->mm, addr, NULL, &folio);
+        if (IS_ERR(page)) {
+            if (page_idx > region.first) {
+                for(int i = page_idx; i < region.outer; i++) {
+                    pages[i] = NULL;
+                }
+                break;
+            } else {
+                status = (ret == -EBUSY) ? NV_WARN_MORE_PROCESSING_REQUIRED : errno_to_nv_status(ret);
+                goto done;
+            }
+        }
+
+        pages[page_idx] = page;
+    }
 
     uvm_mutex_lock(&va_block->lock);
 
-    if (npages < 0) {
-        status = (npages == -EBUSY) ? NV_WARN_MORE_PROCESSING_REQUIRED : errno_to_nv_status(npages);
-        goto done;
-    }
+    // if (npages < 0) {
+    //     status = (npages == -EBUSY) ? NV_WARN_MORE_PROCESSING_REQUIRED : errno_to_nv_status(npages);
+    //     goto done;
+    // }
 
-    while ((size_t)npages < uvm_va_block_region_num_pages(region))
-        pages[region.first + npages++] = NULL;
+    // while ((size_t)npages < uvm_va_block_region_num_pages(region))
+    //     pages[region.first + npages++] = NULL;
 
     if (hmm_range_fault_retry(va_block)) {
         status = NV_WARN_MORE_PROCESSING_REQUIRED;
diff --git a/kernel-open/nvidia-uvm/uvm_pmm_gpu.c b/kernel-open/nvidia-uvm/uvm_pmm_gpu.c
index fb3dfdfc..37e47802 100644
--- a/kernel-open/nvidia-uvm/uvm_pmm_gpu.c
+++ b/kernel-open/nvidia-uvm/uvm_pmm_gpu.c
@@ -3333,7 +3333,7 @@ void uvm_pmm_gpu_device_p2p_init(uvm_gpu_t *gpu)
     // TODO: Bug 4672502: [Linux Upstream][UVM] Allow drivers to manage and
     // allocate PCI P2PDMA pages directly
     p2p_page = pfn_to_page(pci_start_pfn);
-    p2p_page->pgmap->ops = &uvm_device_p2p_pgmap_ops;
+    page_pgmap(p2p_page)->ops = &uvm_device_p2p_pgmap_ops;
     for (; page_to_pfn(p2p_page) < pci_end_pfn; p2p_page++)
         p2p_page->zone_device_data = NULL;
 
@@ -3348,7 +3348,7 @@ void uvm_pmm_gpu_device_p2p_deinit(uvm_gpu_t *gpu)
 
     if (gpu->device_p2p_initialised && !uvm_parent_gpu_is_coherent(gpu->parent)) {
         p2p_page = pfn_to_page(pci_start_pfn);
-        devm_memunmap_pages(&gpu->parent->pci_dev->dev, p2p_page->pgmap);
+        devm_memunmap_pages(&gpu->parent->pci_dev->dev, page_pgmap(p2p_page));
     }
 
     gpu->device_p2p_initialised = false;
diff --git a/kernel-open/nvidia/nv-nano-timer.c b/kernel-open/nvidia/nv-nano-timer.c
index 0ca78e1f..1a300ba3 100644
--- a/kernel-open/nvidia/nv-nano-timer.c
+++ b/kernel-open/nvidia/nv-nano-timer.c
@@ -27,6 +27,7 @@
 #include <linux/hrtimer.h>
 #include <linux/ktime.h>
 #include <linux/timer.h>
+#include <linux/version.h>
 #include "os-interface.h"
 #include "nv-linux.h"
 
@@ -46,7 +47,7 @@ struct nv_nano_timer
 };
 
 /*!
- * @brief runs nano second resolution timer callback 
+ * @brief runs nano second resolution timer callback
 *
  * @param[in] nv_nstimer    Pointer to nv_nano_timer_t object
  */
@@ -150,8 +151,13 @@ void NV_API_CALL nv_create_nano_timer(
     nv_nstimer->nv_nano_timer_callback = nvidia_nano_timer_callback;
 
 #if NV_NANO_TIMER_USE_HRTIMER
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     hrtimer_init(&nv_nstimer->hr_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
     nv_nstimer->hr_timer.function = nv_nano_timer_callback_typed_data;
+#else
+    hrtimer_setup(&nv_nstimer->hr_timer, nv_nano_timer_callback_typed_data,
+                  CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+#endif /* Kernel < 6.15 */
 #else
 #if defined(NV_TIMER_SETUP_PRESENT)
     timer_setup(&nv_nstimer->jiffy_timer, nv_jiffy_timer_callback_typed_data, 0);
@@ -203,7 +209,11 @@ void NV_API_CALL nv_cancel_nano_timer(
 #if NV_NANO_TIMER_USE_HRTIMER
     hrtimer_cancel(&nv_nstimer->hr_timer);
 #else
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     del_timer_sync(&nv_nstimer->jiffy_timer);
+#else
+    timer_delete_sync(&nv_nstimer->jiffy_timer);
+#endif
 #endif
 
 }
diff --git a/kernel-open/nvidia/nv.c b/kernel-open/nvidia/nv.c
index a3a36d3c..915604f6 100644
--- a/kernel-open/nvidia/nv.c
+++ b/kernel-open/nvidia/nv.c
@@ -22,6 +22,7 @@
  */
 
 #include <linux/module.h>  // for MODULE_FIRMWARE
+#include <linux/version.h>
 
 // must precede "nv.h" and "nv-firmware.h" includes
 #define NV_FIRMWARE_FOR_NAME(name)  "nvidia/" NV_VERSION_STRING "/" name ".bin"
@@ -4189,7 +4190,11 @@ int NV_API_CALL nv_stop_rc_timer(
 
     nv_printf(NV_DBG_INFO, "NVRM: stopping rc timer\n");
     nv->rc_timer_enabled = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
     del_timer_sync(&nvl->rc_timer.kernel_timer);
+#else
+    timer_delete_sync(&nvl->rc_timer.kernel_timer);
+#endif
     nv_printf(NV_DBG_INFO, "NVRM: rc timer stopped\n");
 
     return 0;
@@ -4233,7 +4238,11 @@ void NV_API_CALL nv_stop_snapshot_timer(void)
     NV_SPIN_UNLOCK_IRQRESTORE(&nvl->snapshot_timer_lock, flags);
 
     if (timer_active)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 15, 0)
         del_timer_sync(&nvl->snapshot_timer.kernel_timer);
+#else
+        timer_delete_sync(&nvl->snapshot_timer.kernel_timer);
+#endif
 }
 
 void NV_API_CALL nv_flush_snapshot_timer(void)
diff --git a/src/nvidia-modeset/Makefile b/src/nvidia-modeset/Makefile
index 7fef005c..964043eb 100644
--- a/src/nvidia-modeset/Makefile
+++ b/src/nvidia-modeset/Makefile
@@ -154,6 +154,7 @@ ifeq ($(TARGET_ARCH),x86_64)
   CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -fno-jump-tables)
   CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -mindirect-branch=thunk-extern)
   CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -mindirect-branch-register)
+  CONDITIONAL_CFLAGS += $(call TEST_CC_ARG, -mharden-sls=all)
 endif
 
 CFLAGS += $(CONDITIONAL_CFLAGS)
-- 
2.43.0

